Ext.data.JsonP.dev_dialog_add_file_browser({"guide":"<!--\nCopyright (c) 2003-2015, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md.\n-->\n\n\n<h1 id='dev_dialog_add_file_browser-section-adding-file-browser-to-dialog'>Adding File Browser to Dialog</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/dev_dialog_add_file_browser-section-dialogs'>Dialogs</a></li>\n<li>\n<a href='#!/guide/dev_dialog_add_file_browser-section-filebrowser-plugin'>Filebrowser Plugin</a><ol>\n<li>\n<a href='#!/guide/dev_dialog_add_file_browser-section-adding-%22browse-server%22-button'>Adding \"Browse Server\" button</a></li>\n<li>\n<a href='#!/guide/dev_dialog_add_file_browser-section-adding-%22quick-upload%22-support'>Adding \"Quick Upload\" support</a></li>\n<li>\n<a href='#!/guide/dev_dialog_add_file_browser-section-advanced-configuration-%28browsing%29'>Advanced configuration (Browsing)</a></li>\n<li>\n<a href='#!/guide/dev_dialog_add_file_browser-section-advanced-configuration-%28quick-uploads%29'>Advanced configuration (Quick Uploads)</a></li></ol></ol>\n</div>\n\n<p>CKEditor can be easily integrated with your own file browser thanks to the <a href=\"http://ckeditor.com/addon/filebrowser\">File Browser</a> plugin which is included in every preset by default.</p>\n\n<p>To connect a file browser that is already compatible with CKEditor (like\n<a href=\"http://ckfinder.com\">CKFinder</a>), follow the <a href=\"#!/guide/dev_file_browse_upload\">File Browser (Uploader)</a>\ndocumentation.</p>\n\n<h2 id='dev_dialog_add_file_browser-section-dialogs'>Dialogs</h2>\n\n<p>Please refer to the <a href=\"#!/api/CKEDITOR.dialog.definition\" rel=\"CKEDITOR.dialog.definition\" class=\"docClass\">Dialog definition API</a> for\ngeneral help on how to create a dialog box.</p>\n\n<h2 id='dev_dialog_add_file_browser-section-filebrowser-plugin'>Filebrowser Plugin</h2>\n\n<p>The <code>filebrowser</code> plugin is built-in into CKEditor. It's only purpose is\nto provide an API inside of CKEditor to easily integrate any external\nfile browser with it and to add file browser features to various\nCKEditor components (usually to dialogs).</p>\n\n<h3 id='dev_dialog_add_file_browser-section-adding-%22browse-server%22-button'>Adding \"Browse Server\" button</h3>\n\n<p>To assign the filebrowser plugin to an element inside of a dialog box,\nset the \"filebrowser\" property. For example in the <code>image</code> plugin source\nthere is:</p>\n\n<pre><code>{\n    type: 'button',\n    hidden: true,\n    id: 'browse',\n    filebrowser: 'Link:txtUrl',\n    label: editor.lang.common.browseServer,\n    style: 'float:right',\n},\n</code></pre>\n\n<p>This button will be hidden by default (<code>hidden:true</code>). The filebrowser\nplugin looks for all elements with the filebrowser attribute and unhides\nthem if appropriate configuration setting is available\n(<a href=\"#!/guide/dev_file_browse_upload-section-1\">filebrowserBrowseUrl/filebrowserUploadUrl</a>).</p>\n\n<p>The action performed by the plugin depends on the element\ntype, for <a href=\"#!/api/CKEDITOR.dialog.definition.fileButton\" rel=\"CKEDITOR.dialog.definition.fileButton\" class=\"docClass\">fileButton</a>\nit is <strong>QuickUpload</strong>, for other elements the default action is\n<strong>Browse</strong>. In the example above, the file browser will be launched (in\na popup) when button is clicked.</p>\n\n<p>The <code>'Link:txtUrl'</code> value instructs the plugin to update an\nelement with id <code>txtUrl</code> inside of the <code>Link</code> tab when\n<code><a href=\"#!/api/CKEDITOR.tools-method-callFunction\" rel=\"CKEDITOR.tools-method-callFunction\" class=\"docClass\">CKEDITOR.tools.callFunction</a>( funcNum )</code> is called (see <a href=\"#!/guide/dev_file_browser_api\">Custom File\nBrowser</a>).</p>\n\n<h3 id='dev_dialog_add_file_browser-section-adding-%22quick-upload%22-support'>Adding \"Quick Upload\" support</h3>\n\n<p>Again, to see how we can handle file uploads in our dialog box, we'll\nuse working example from CKEditor. In the <code>image</code> plugin there is a definition\nof the <code>Upload</code> tab:</p>\n\n<pre><code>{\n    id: 'Upload',\n    hidden: true,\n    filebrowser: 'uploadButton',\n    label: editor.lang.image.upload,\n    elements: [\n        {\n            type: 'file',\n            id: 'upload',\n            label: editor.lang.image.btnUpload,\n            style: 'height:40px',\n            size: 38\n        },\n        {\n            type: 'fileButton',\n            id: 'uploadButton',\n            filebrowser: 'info:txtUrl',\n            label: editor.lang.image.btnUpload,\n            'for': [ 'Upload', 'upload' ]\n        }\n    ]\n},\n</code></pre>\n\n<p>This example is a little bit more complicated than the previous one,\nbecause 1) we have here a definition of the whole tab 2) we need two\nelements:\n<a href=\"#!/api/CKEDITOR.dialog.definition.file\" rel=\"CKEDITOR.dialog.definition.file\" class=\"docClass\">file</a>\nand\n<a href=\"#!/api/CKEDITOR.dialog.definition.fileButton\" rel=\"CKEDITOR.dialog.definition.fileButton\" class=\"docClass\">fileButton</a>\nto upload a file.</p>\n\n<p>In the example above, the id of a tab is <code>'Upload'</code>. It is hidden by\ndefault (<code>hidden:true</code>). As already mentioned, the filebrowser plugin\nlooks for all elements with the filebrowser attribute and unhides them\nif appropriate configuration setting is available. In this case, the tab will\nbe unhidden automatically if a filebrowser setting for <code>'uploadButton'</code>\n(because of <code>filebrowser:'uploadButton'</code>) will be available (<code>filebrowserUploadUrl</code>).</p>\n\n<p>The <code>file</code> element is simple and doesn't need to be explained, it is\njust an input element that will store the name of a file that will be\nuploaded.</p>\n\n<p>The <code>fileButton</code> element is more interesting. The <code>'info:txtUrl'</code> value\ninstructs the filebrowser plugin to update an element with id <code>txtUrl</code>\ninside of the <code>info</code> tab when <code><a href=\"#!/api/CKEDITOR.tools-method-callFunction\" rel=\"CKEDITOR.tools-method-callFunction\" class=\"docClass\">CKEDITOR.tools.callFunction</a>( funcNum )</code> is\ncalled (see <a href=\"#!/guide/dev_file_browser_api\">Custom File Browser</a>).\nThe <code>'for': [ 'Upload', 'upload'   ]</code> line is used to connect\nfileButton with file element. It is an instruction for CKEditor to\nupload a file using the <code>'file'</code> element with id <code>'upload'</code> (second\nvalue) inside of the <code>'Upload'</code> tab (first value).</p>\n\n<h3 id='dev_dialog_add_file_browser-section-advanced-configuration-%28browsing%29'>Advanced configuration (Browsing)</h3>\n\n<p>It is possible to define your own function that will be called when file\nis selected/uploaded.</p>\n\n<pre><code>{\n    type: 'button',\n    hidden: true,\n    id: 'id0',\n    label: editor.lang.common.browseServer,\n    filebrowser: {\n        action: 'Browse',\n        // target: 'tab1:id1',\n        onSelect: function( fileUrl, data ) {\n            alert( 'The selected file URL is \"' + fileUrl + '\"' );\n\n            for ( var _info in data )\n                alert( 'data[ \"' + _info + '\" ]' + ' = ' + data[ _info ] );\n\n            var dialog = this.getDialog();\n            dialog.getContentElement( 'tab1', 'id1' ).setValue( data[ 'fileUrl' ] );\n\n            // Do not call the built-in onSelect command\n            return false;\n        }\n    }\n}\n</code></pre>\n\n<p>In this example we're setting the action to 'Browse' to call the file\nbrowser when button is clicked. <code>'target'</code> is not required, because\nwe'll update the target element in the custom <code>onSelect</code> function.</p>\n\n<p>As explained in the <a href=\"#!/guide/dev_file_browser_api\">documentation</a>,\nwe have called <code><a href=\"#!/api/CKEDITOR.tools-method-callFunction\" rel=\"CKEDITOR.tools-method-callFunction\" class=\"docClass\">CKEDITOR.tools.callFunction</a>( funcNum, fileUrl, data );</code>\nwhen user selected a file. The fileUrl and data arguments are passed to\nour custom <code>onSelect</code> function and we can use it to update the target\nelement.</p>\n\n<h3 id='dev_dialog_add_file_browser-section-advanced-configuration-%28quick-uploads%29'>Advanced configuration (Quick Uploads)</h3>\n\n<p>In a similar way like we configured the button to open the file browser,\nwe can configure the fileButton.</p>\n\n<pre><code>{\n    type: 'file',\n    label: editor.lang.common.upload,\n    labelLayout: 'vertical',\n    id: 'id2'\n},\n{\n    type: 'fileButton',\n    label: editor.lang.common.uploadSubmit,\n    id: 'id3',\n    filebrowser: {\n        action: 'QuickUpload',\n        params: { type: 'Files', currentFolder: '/folder/' },\n        target: 'tab1:id1',\n        onSelect: function( fileUrl, errorMessage ) {\n            alert( 'The url of uploaded file is: ' + fileUrl + '\\nerrorMessage: ' + errorMessage );\n            // Do not call the built-in onSelect command\n            // return false;\n        }\n    },\n    'for': [ 'tab1', 'id2' ]\n}\n</code></pre>\n\n<p>In the <code>filebrowser.params</code> attribute we can add additional arguments to\nbe passed in the query string to the external file browser.\n<code>filebrowser.target</code> is the target element to be updated when file is\nreturned by the server connector (uploader) - we don't need it if we\ndefine our own <code>onSelect</code> function (<code>filebrowser.onSelect</code>) and update\nthe target element in this function, just like we did in previous\nexample.</p>\n","title":"Integrating with Dialogs","meta_description":"How to integrate a file browser with CKEditor dialog windows.","meta_keywords":"ckeditor, editor, integrate, integration, file, files, upload, manage, management, browse, browser, image, images, dialog, dialogs, window, windows"});